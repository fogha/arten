export interface DOMNode {
  // Node type: 1 for Element, 3 for Text nodes
  nodeType?: number;
  tagName: string;
  id: string;
  className: string;
  textContent: string;
  innerText?: string; // Text content visible to user
  type?: string;
  children: DOMNode[];
  attributes?: Record<string, string>;
  // CSS selector path to this element
  path?: string;
  // CSS selector for this element (typically generated by the system)
  selector?: string;
  // Computed styles for the element
  styles?: Record<string, string>;
  // Extracted computed styles from the browser
  computedStyles?: Record<string, string>;
  // Add browser-specific properties needed for DOM operations
  getBoundingClientRect?: () => DOMRect;
  parentElement?: DOMNode | null;
}

// Helper function to convert a DOM Element to our DOMNode format
export function elementToDOMNode(element: Element | null): DOMNode | null {
  if (!element) return null;
  
  // Convert children recursively
  const children: DOMNode[] = [];
  for (let i = 0; i < element.children.length; i++) {
    const childNode = elementToDOMNode(element.children[i]);
    if (childNode) {
      children.push(childNode);
    }
  }
  
  // Extract attributes
  const attributes: Record<string, string> = {};
  for (let i = 0; i < element.attributes.length; i++) {
    const attr = element.attributes[i];
    attributes[attr.name] = attr.value;
  }
  
  return {
    tagName: element.tagName.toLowerCase(),
    id: element.id || '',
    className: element.className || '',
    textContent: element.textContent || '',
    type: (element as HTMLInputElement).type,
    children,
    attributes,
    getBoundingClientRect: () => element.getBoundingClientRect()
  };
}
